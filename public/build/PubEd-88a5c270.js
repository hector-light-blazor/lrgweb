
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, q as space, x as text, b as attr_dev, f as add_location, l as listen_dev, g as insert_dev, r as append_dev, A as noop, m as detach_dev, C as bubble, B as globals, H as Header, W as Wrapper, F as Footer, n as create_component, u as mount_component, t as transition_in, k as transition_out, v as destroy_component, y as set_style, D as group_outros, E as check_outros } from './Wrapper-391a0201.js';

/* src\components\VideoPlayer.svelte generated by Svelte v3.16.7 */

const file = "src\\components\\VideoPlayer.svelte";

function create_fragment(ctx) {
	let div;
	let button;
	let t1;
	let video;
	let source;
	let source_src_value;
	let t2;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			button = element("button");
			button.textContent = "Go Back";
			t1 = space();
			video = element("video");
			source = element("source");
			t2 = text("\r\n  Your browser does not support HTML5 video.");
			attr_dev(button, "class", "svelte-vg7yqn");
			add_location(button, file, 24, 4, 395);
			attr_dev(div, "class", "btn-close svelte-vg7yqn");
			add_location(div, file, 23, 0, 366);
			if (source.src !== (source_src_value = /*src*/ ctx[0])) attr_dev(source, "src", source_src_value);
			attr_dev(source, "type", "video/mp4");
			add_location(source, file, 27, 2, 467);
			video.controls = true;
			video.autoplay = true;
			attr_dev(video, "class", "svelte-vg7yqn");
			add_location(video, file, 26, 0, 438);
			dispose = listen_dev(button, "click", /*click_handler*/ ctx[1], false, false, false);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, button);
			insert_dev(target, t1, anchor);
			insert_dev(target, video, anchor);
			append_dev(video, source);
			append_dev(video, t2);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*src*/ 1 && source.src !== (source_src_value = /*src*/ ctx[0])) {
				attr_dev(source, "src", source_src_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(video);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { src } = $$props;
	const writable_props = ["src"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<VideoPlayer> was created with unknown prop '${key}'`);
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("src" in $$props) $$invalidate(0, src = $$props.src);
	};

	$$self.$capture_state = () => {
		return { src };
	};

	$$self.$inject_state = $$props => {
		if ("src" in $$props) $$invalidate(0, src = $$props.src);
	};

	return [src, click_handler];
}

class VideoPlayer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { src: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "VideoPlayer",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<VideoPlayer> was created without expected prop 'src'");
		}
	}

	get src() {
		throw new Error("<VideoPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<VideoPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\pages\PubEd.svelte generated by Svelte v3.16.7 */

const { console: console_1 } = globals;
const file$1 = "src\\pages\\PubEd.svelte";

// (142:16) {:else}
function create_else_block_2(ctx) {
	let img;
	let img_src_value;
	let dispose;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "loading", "lazy");
			attr_dev(img, "class", "imgResponsive svelte-17adeyp");
			if (img.src !== (img_src_value = "/build/assets/pages/pubed/karis_law_banner.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Kari Banner");
			add_location(img, file$1, 142, 20, 4817);
			dispose = listen_dev(img, "click", /*click_handler_2*/ ctx[9], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(142:16) {:else}",
		ctx
	});

	return block;
}

// (140:16) {#if karisVideo}
function create_if_block_2(ctx) {
	let current;

	const videoplayer = new VideoPlayer({
			props: { src: /*karisLink*/ ctx[5] },
			$$inline: true
		});

	videoplayer.$on("click", /*click_handler_1*/ ctx[8]);

	const block = {
		c: function create() {
			create_component(videoplayer.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(videoplayer, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(videoplayer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(videoplayer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(videoplayer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(140:16) {#if karisVideo}",
		ctx
	});

	return block;
}

// (152:20) {:else}
function create_else_block_1(ctx) {
	let img;
	let img_src_value;
	let dispose;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "loading", "lazy");
			attr_dev(img, "class", "imgResponsive svelte-17adeyp");
			if (img.src !== (img_src_value = "/build/assets/pages/pubed/lv_banner.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Lv banner");
			add_location(img, file$1, 152, 28, 5540);
			dispose = listen_dev(img, "click", /*click_handler_4*/ ctx[11], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(152:20) {:else}",
		ctx
	});

	return block;
}

// (150:20) {#if lvVideo}
function create_if_block_1(ctx) {
	let current;

	const videoplayer = new VideoPlayer({
			props: { src: /*lvLink*/ ctx[4] },
			$$inline: true
		});

	videoplayer.$on("click", /*click_handler_3*/ ctx[10]);

	const block = {
		c: function create() {
			create_component(videoplayer.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(videoplayer, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(videoplayer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(videoplayer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(videoplayer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(150:20) {#if lvVideo}",
		ctx
	});

	return block;
}

// (161:20) {:else}
function create_else_block(ctx) {
	let img;
	let img_src_value;
	let dispose;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "loading", "lazy");
			attr_dev(img, "class", "imgResponsive svelte-17adeyp");
			if (img.src !== (img_src_value = "/build/assets/pages/pubed/text_to_911_banner.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "TXT 911 Banner");
			add_location(img, file$1, 161, 28, 6188);
			dispose = listen_dev(img, "click", /*click_handler_6*/ ctx[13], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(161:20) {:else}",
		ctx
	});

	return block;
}

// (159:20) {#if txtVideo}
function create_if_block(ctx) {
	let current;

	const videoplayer = new VideoPlayer({
			props: { src: /*txtLink*/ ctx[6] },
			$$inline: true
		});

	videoplayer.$on("click", /*click_handler_5*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(videoplayer.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(videoplayer, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(videoplayer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(videoplayer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(videoplayer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(159:20) {#if txtVideo}",
		ctx
	});

	return block;
}

// (110:4) <Wrapper>
function create_default_slot(ctx) {
	let div10;
	let h1;
	let b;
	let i0;
	let t2;
	let div4;
	let div1;
	let p0;
	let t4;
	let p1;
	let t6;
	let p2;
	let t8;
	let div0;
	let button;
	let t10;
	let div2;
	let t11;
	let div3;
	let img0;
	let img0_src_value;
	let t12;
	let div9;
	let h3;
	let i1;
	let t14;
	let p3;
	let t16;
	let current_block_type_index;
	let if_block0;
	let t17;
	let div5;
	let t19;
	let current_block_type_index_1;
	let if_block1;
	let t20;
	let div6;
	let t22;
	let current_block_type_index_2;
	let if_block2;
	let t23;
	let div7;
	let t24;
	let br;
	let t25;
	let a;
	let t27;
	let div8;
	let img1;
	let img1_src_value;
	let t28;
	let h2;
	let current;
	let dispose;
	const if_block_creators = [create_if_block_2, create_else_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*karisVideo*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const if_block_creators_1 = [create_if_block_1, create_else_block_1];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*lvVideo*/ ctx[3]) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	const if_block_creators_2 = [create_if_block, create_else_block];
	const if_blocks_2 = [];

	function select_block_type_2(ctx, dirty) {
		if (/*txtVideo*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index_2 = select_block_type_2(ctx);
	if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);

	const block = {
		c: function create() {
			div10 = element("div");
			h1 = element("h1");
			b = element("b");
			b.textContent = "Public Education ";
			i0 = element("i");
			i0.textContent = "Program";
			t2 = space();
			div4 = element("div");
			div1 = element("div");
			p0 = element("p");
			p0.textContent = "We attend several events which gives us the opportunity to promote and educate the public on how to properly use the 9-1-1 system.";
			t4 = space();
			p1 = element("p");
			p1.textContent = "We give presentations that local cities, school, daycares, Fire, Police Depts. and Emergency Medical Services (EMS) companies within the Hidalgo and Willacy Counties. While attending these events, our mascots (Cell Phone Sally, Josh and Keith Friendly Kid) have become a great part of our education program";
			t6 = space();
			p2 = element("p");
			p2.textContent = "Using multi-media, we demonstrate the proper way to call 9-1-1 and what is considered a 9-1-1 emergency call. Promotional item distribution is a major part of our program.";
			t8 = space();
			div0 = element("div");
			button = element("button");
			button.textContent = "EVENT REQUEST";
			t10 = space();
			div2 = element("div");
			t11 = space();
			div3 = element("div");
			img0 = element("img");
			t12 = space();
			div9 = element("div");
			h3 = element("h3");
			i1 = element("i");
			i1.textContent = "Do you know how to make 9-1-1 work for you?";
			t14 = space();
			p3 = element("p");
			p3.textContent = "For forty years, 9-1-1 has served as the vital link between the American public and emergency services. Public education and awareness initiatives throughout the years have contributed in large measure to the incredible and ongoing success of the emergency communications system as a whole. It is imperative that 9-1-1 professionals, teachers, government officials, media representatives, and industry leaders are equipped with the tools necessary to continue these efforts in the face of an ever-changing telecommunications landscape, and that citizens of all ages are well versed in the role they play in ensuring effective and efficient emergency response for themselves and their fellow citizens.The resources below provide you with the tools necessary to educate yourself and your community on the proper use of the 9-1-1 system, no matter which side of the phone you are on.";
			t16 = space();
			if_block0.c();
			t17 = space();
			div5 = element("div");
			div5.textContent = "require multi-line telephone systems to have a configuration that permits users to directly initiate \r\n                        a call to 9-1-1 without dialing any additional digit, code, prefix, or post-fix, and for other purposes.";
			t19 = space();
			if_block1.c();
			t20 = space();
			div6 = element("div");
			div6.textContent = "We work with other agencies such as the United States Postal Service (USPS), telephone companies and others to make sure the 9-1-1 physical address is well known.";
			t22 = space();
			if_block2.c();
			t23 = space();
			div7 = element("div");
			t24 = text("Text-to-911 is the ability to send a text message to reach 911 emergency call takers from your mobile phone or device. However, because text-to-911 is currently only available in certain locations, you should always make a voice call to contact 911 during an emergency whenever possible.\r\n                    ");
			br = element("br");
			t25 = text("Visit: ");
			a = element("a");
			a.textContent = "https://www.congress.gov/bill/115th-congress/house-bill/582/text";
			t27 = space();
			div8 = element("div");
			img1 = element("img");
			t28 = space();
			h2 = element("h2");
			h2.textContent = "Click here for event information";
			add_location(b, file$1, 111, 12, 2335);
			attr_dev(i0, "class", "svelte-17adeyp");
			add_location(i0, file$1, 111, 36, 2359);
			attr_dev(h1, "class", "svelte-17adeyp");
			add_location(h1, file$1, 111, 8, 2331);
			attr_dev(p0, "class", "svelte-17adeyp");
			add_location(p0, file$1, 114, 20, 2461);
			attr_dev(p1, "class", "svelte-17adeyp");
			add_location(p1, file$1, 117, 20, 2668);
			attr_dev(p2, "class", "svelte-17adeyp");
			add_location(p2, file$1, 120, 20, 3027);
			attr_dev(button, "class", "svelte-17adeyp");
			add_location(button, file$1, 125, 20, 3318);
			attr_dev(div0, "id", "btnEvent");
			attr_dev(div0, "class", "svelte-17adeyp");
			add_location(div0, file$1, 124, 20, 3277);
			add_location(div1, file$1, 113, 12, 2434);
			add_location(div2, file$1, 128, 12, 3450);
			attr_dev(img0, "id", "imgCon");
			if (img0.src !== (img0_src_value = "/build/assets/pages/pubed/main-photo.webp")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", "Kids with mascot");
			attr_dev(img0, "class", "svelte-17adeyp");
			add_location(img0, file$1, 130, 16, 3498);
			add_location(div3, file$1, 129, 12, 3475);
			attr_dev(div4, "class", "grid-container-3 svelte-17adeyp");
			add_location(div4, file$1, 112, 8, 2390);
			add_location(i1, file$1, 137, 20, 3681);
			attr_dev(h3, "class", "svelte-17adeyp");
			add_location(h3, file$1, 137, 16, 3677);
			attr_dev(p3, "class", "svelte-17adeyp");
			add_location(p3, file$1, 138, 16, 3754);
			attr_dev(div5, "class", "bannerMsg svelte-17adeyp");
			add_location(div5, file$1, 145, 20, 5041);
			attr_dev(div6, "class", "bannerMsg svelte-17adeyp");
			add_location(div6, file$1, 154, 20, 5733);
			add_location(br, file$1, 166, 20, 6771);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "href", "https://www.congress.gov/bill/115th-congress/house-bill/582/text");
			add_location(a, file$1, 166, 31, 6782);
			attr_dev(div7, "class", "bannerMsg svelte-17adeyp");
			add_location(div7, file$1, 164, 20, 6417);
			attr_dev(img1, "loading", "lazy");
			attr_dev(img1, "class", "imgResponsive svelte-17adeyp");
			attr_dev(img1, "width", "850");
			if (img1.src !== (img1_src_value = "/assets/jpg/team_banner.jpg")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "Team Banner");
			add_location(img1, file$1, 170, 24, 7045);
			set_style(h2, "text-align", "center");
			set_style(h2, "color", "#88362E");
			attr_dev(h2, "class", "svelte-17adeyp");
			add_location(h2, file$1, 171, 24, 7180);
			add_location(div8, file$1, 169, 20, 7013);
			add_location(div9, file$1, 136, 12, 3654);
			attr_dev(div10, "class", "flex-container svelte-17adeyp");
			add_location(div10, file$1, 110, 8, 2293);
			dispose = listen_dev(button, "click", /*click_handler*/ ctx[7], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div10, anchor);
			append_dev(div10, h1);
			append_dev(h1, b);
			append_dev(h1, i0);
			append_dev(div10, t2);
			append_dev(div10, div4);
			append_dev(div4, div1);
			append_dev(div1, p0);
			append_dev(div1, t4);
			append_dev(div1, p1);
			append_dev(div1, t6);
			append_dev(div1, p2);
			append_dev(div1, t8);
			append_dev(div1, div0);
			append_dev(div0, button);
			append_dev(div4, t10);
			append_dev(div4, div2);
			append_dev(div4, t11);
			append_dev(div4, div3);
			append_dev(div3, img0);
			append_dev(div10, t12);
			append_dev(div10, div9);
			append_dev(div9, h3);
			append_dev(h3, i1);
			append_dev(div9, t14);
			append_dev(div9, p3);
			append_dev(div9, t16);
			if_blocks[current_block_type_index].m(div9, null);
			append_dev(div9, t17);
			append_dev(div9, div5);
			append_dev(div9, t19);
			if_blocks_1[current_block_type_index_1].m(div9, null);
			append_dev(div9, t20);
			append_dev(div9, div6);
			append_dev(div9, t22);
			if_blocks_2[current_block_type_index_2].m(div9, null);
			append_dev(div9, t23);
			append_dev(div9, div7);
			append_dev(div7, t24);
			append_dev(div7, br);
			append_dev(div7, t25);
			append_dev(div7, a);
			append_dev(div9, t27);
			append_dev(div9, div8);
			append_dev(div8, img1);
			append_dev(div8, t28);
			append_dev(div8, h2);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(div9, t17);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(div9, t20);
			}

			let previous_block_index_2 = current_block_type_index_2;
			current_block_type_index_2 = select_block_type_2(ctx);

			if (current_block_type_index_2 === previous_block_index_2) {
				if_blocks_2[current_block_type_index_2].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
					if_blocks_2[previous_block_index_2] = null;
				});

				check_outros();
				if_block2 = if_blocks_2[current_block_type_index_2];

				if (!if_block2) {
					if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
					if_block2.c();
				}

				transition_in(if_block2, 1);
				if_block2.m(div9, t23);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div10);
			if_blocks[current_block_type_index].d();
			if_blocks_1[current_block_type_index_1].d();
			if_blocks_2[current_block_type_index_2].d();
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(110:4) <Wrapper>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let t1;
	let current;

	const header = new Header({
			props: { nav: /*nav*/ ctx[0] },
			$$inline: true
		});

	const wrapper = new Wrapper({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const footer = new Footer({ $$inline: true });

	const block = {
		c: function create() {
			create_component(header.$$.fragment);
			t0 = space();
			create_component(wrapper.$$.fragment);
			t1 = space();
			create_component(footer.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(header, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(wrapper, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(footer, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const header_changes = {};
			if (dirty & /*nav*/ 1) header_changes.nav = /*nav*/ ctx[0];
			header.$set(header_changes);
			const wrapper_changes = {};

			if (dirty & /*$$scope, txtVideo, lvVideo, karisVideo*/ 16398) {
				wrapper_changes.$$scope = { dirty, ctx };
			}

			wrapper.$set(wrapper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(wrapper.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(wrapper.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(wrapper, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(footer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { nav } = $$props;
	let txtVideo = false;
	let karisVideo = false;
	let lvVideo = false;
	let lvLink = "./build/assets/videos/lv_psa.mp4";
	let karisLink = "./build/assets/videos/karis_law.mp4";
	let txtLink = "./build/assets/videos/txt_to_911.mp4";
	const writable_props = ["nav"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<PubEd> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		console.log("EVENT");
	};

	const click_handler_1 = () => {
		$$invalidate(2, karisVideo = false);
	};

	const click_handler_2 = () => {
		$$invalidate(2, karisVideo = !karisVideo);
	};

	const click_handler_3 = () => {
		$$invalidate(3, lvVideo = false);
	};

	const click_handler_4 = () => {
		$$invalidate(3, lvVideo = !lvVideo);
	};

	const click_handler_5 = () => {
		$$invalidate(1, txtVideo = false);
	};

	const click_handler_6 = () => {
		$$invalidate(1, txtVideo = !txtVideo);
	};

	$$self.$set = $$props => {
		if ("nav" in $$props) $$invalidate(0, nav = $$props.nav);
	};

	$$self.$capture_state = () => {
		return {
			nav,
			txtVideo,
			karisVideo,
			lvVideo,
			lvLink,
			karisLink,
			txtLink
		};
	};

	$$self.$inject_state = $$props => {
		if ("nav" in $$props) $$invalidate(0, nav = $$props.nav);
		if ("txtVideo" in $$props) $$invalidate(1, txtVideo = $$props.txtVideo);
		if ("karisVideo" in $$props) $$invalidate(2, karisVideo = $$props.karisVideo);
		if ("lvVideo" in $$props) $$invalidate(3, lvVideo = $$props.lvVideo);
		if ("lvLink" in $$props) $$invalidate(4, lvLink = $$props.lvLink);
		if ("karisLink" in $$props) $$invalidate(5, karisLink = $$props.karisLink);
		if ("txtLink" in $$props) $$invalidate(6, txtLink = $$props.txtLink);
	};

	return [
		nav,
		txtVideo,
		karisVideo,
		lvVideo,
		lvLink,
		karisLink,
		txtLink,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6
	];
}

class PubEd extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { nav: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PubEd",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*nav*/ ctx[0] === undefined && !("nav" in props)) {
			console_1.warn("<PubEd> was created without expected prop 'nav'");
		}
	}

	get nav() {
		throw new Error("<PubEd>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nav(value) {
		throw new Error("<PubEd>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default PubEd;
//# sourceMappingURL=PubEd-88a5c270.js.map
